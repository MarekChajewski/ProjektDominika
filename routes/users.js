const express = require('express');
const Joi = require('joi');
const mongoose = require('mongoose');
const jwt = require('jsonwebtoken');
const dotenv = require('dotenv');
const router = express.Router();
const User = require('../models/User');

dotenv.config();
const JWT_SECRET = process.env.JWT_SECRET || "supersecretkey";

// üìå Schemat walidacji u≈ºytkownika
const userSchema = Joi.object({
    firstName: Joi.string().min(2).max(30).required(),
    lastName: Joi.string().min(2).max(30).required(),
    email: Joi.string().email().required(),
    password: Joi.string().min(6).required(),
    role: Joi.string().valid('user', 'admin').optional() // üîπ Walidacja r√≥l
});

// üìå Middleware autoryzacji JWT
const authenticate = (req, res, next) => {
    const token = req.header('Authorization');
    if (!token) return res.status(401).json({ message: 'Brak tokenu, autoryzacja odm√≥wiona' });

    try {
        const decoded = jwt.verify(token.replace('Bearer ', ''), JWT_SECRET);
        req.user = decoded;
        next();
    } catch (error) {
        res.status(401).json({ message: 'Nieprawid≈Çowy token' });
    }
};

// üìå Middleware sprawdzania roli admina
const isAdmin = (req, res, next) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ message: 'Brak uprawnie≈Ñ (tylko admin)' });
    }
    next();
};

// üìå 1Ô∏è‚É£ Pobranie wszystkich u≈ºytkownik√≥w (tylko admin)
router.get('/', authenticate, isAdmin, async (req, res, next) => {
    try {
        const users = await User.find().select('-password');
        res.json(users);
    } catch (error) {
        next(error);
    }
});

// üìå 2Ô∏è‚É£ Pobranie jednego u≈ºytkownika (admin lub w≈Ça≈õciciel konta)
router.get('/:id', authenticate, async (req, res, next) => {
    try {
        if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
            return res.status(400).json({ message: "Nieprawid≈Çowy identyfikator u≈ºytkownika" });
        }

        const user = await User.findById(req.params.id).select('-password');
        if (!user) return res.status(404).json({ message: 'U≈ºytkownik nie znaleziony' });

        if (req.user.id !== req.params.id && req.user.role !== 'admin') {
            return res.status(403).json({ message: 'Brak dostƒôpu' });
        }

        res.json(user);
    } catch (error) {
        next(error);
    }
});

// üìå 3Ô∏è‚É£ Rejestracja u≈ºytkownika (brak haszowania has≈Ça)
router.post('/register', async (req, res, next) => {
    try {
        const { error } = userSchema.validate(req.body);
        if (error) return res.status(400).json({ message: error.details[0].message });

        const { firstName, lastName, email, password, role } = req.body;

        const existingUser = await User.findOne({ email });
        if (existingUser) return res.status(400).json({ message: "U≈ºytkownik z tym emailem ju≈º istnieje" });

        const newUser = new User({ firstName, lastName, email, password, role: role || 'user' });
        await newUser.save();

        res.status(201).json({ message: "Rejestracja zako≈Ñczona sukcesem" });
    } catch (error) {
        next(error);
    }
});

// üìå 4Ô∏è‚É£ Logowanie u≈ºytkownika (sprawdzanie has≈Ça bez haszowania)
router.post('/login', async (req, res, next) => {
    try {
        const { email, password } = req.body;

        const user = await User.findOne({ email });
        if (!user) return res.status(400).json({ message: "Nieprawid≈Çowy email lub has≈Ço" });

        // üîπ Sprawdzanie has≈Ça bez haszowania
        if (user.password !== password) {
            return res.status(400).json({ message: "Nieprawid≈Çowy email lub has≈Ço" });
        }

        const token = jwt.sign({ id: user._id, email: user.email, role: user.role }, JWT_SECRET, { expiresIn: '1h' });

        res.json({ token });
    } catch (error) {
        next(error);
    }
});

// üìå 5Ô∏è‚É£ Aktualizacja u≈ºytkownika (admin lub w≈Ça≈õciciel konta)
router.put('/:id', authenticate, async (req, res, next) => {
    try {
        if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
            return res.status(400).json({ message: "Nieprawid≈Çowy identyfikator u≈ºytkownika" });
        }

        if (req.user.id !== req.params.id && req.user.role !== 'admin') {
            return res.status(403).json({ message: 'Brak uprawnie≈Ñ' });
        }

        const updatedUser = await User.findByIdAndUpdate(req.params.id, req.body, { new: true }).select('-password');
        res.json(updatedUser);
    } catch (error) {
        next(error);
    }
});

// üìå 6Ô∏è‚É£ Usuniƒôcie u≈ºytkownika (tylko admin)
router.delete('/:id', authenticate, isAdmin, async (req, res, next) => {
    try {
        if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
            return res.status(400).json({ message: "Nieprawid≈Çowy identyfikator u≈ºytkownika" });
        }

        const deletedUser = await User.findByIdAndDelete(req.params.id);
        if (!deletedUser) return res.status(404).json({ message: 'U≈ºytkownik nie znaleziony' });

        res.json({ message: 'U≈ºytkownik usuniƒôty' });
    } catch (error) {
        next(error);
    }
});

module.exports = router;